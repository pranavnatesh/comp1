#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define LENGTH 100

void printString(char string[]){
    for(int i=0;i<LENGTH;i++){
        if(string[i]=='\0'){
            printf("\\0");
        }else{
            printf("%c",string[i]);
        }
    }
    printf("\n");
}

void insertName(char *startPos[], int*nrNames, char newName[]){
    int len=strlen(newName);
    strcpy(startPos[*nrNames],newName);
    startPos[*nrNames+1]=startPos[*nrNames]+len+1;
    *nrNames=*nrNames+1;
}

void printNames(char names[], char *startPos[], int nrNames){
    int index=0;
    for(int i=0;i<nrNames;i++){
        int len=strlen(startPos[i])+1;
        index = *(startPos+i)-names;
        printf("startPos[%i]=%02d length=%02d string=\"%s\"\n",i,index,len,startPos[i]);
    }
}

int totalLength(char *startPos[], int nrNames){
    int total=0;
    for(int i=0;i<nrNames;i++){
        total += (strlen(startPos[i])+1);
    }
    
    return total;
}

int lookupNamePos(char names[], char *startPos[], int nrNames, char name[]){
    int index = -1;
    for(int i=0;i<nrNames;i++){
        if(strcmp(startPos[i],name)==0){
            index = startPos[i]-&names[0];
        }
    }
    return index;
}

void removeName(char *startPos[], int *nrNames, char remName[]){
    int index = -1;
    for(int i=0;i<*nrNames;i++){
        if(strcmp(startPos[i],remName)==0){
            index = i;
            break;
        }
    }
    if(index!=-1){
        *(startPos+index)=*(startPos+*nrNames-1);
        *(startPos+*nrNames-1)=*(startPos+*nrNames);
        *nrNames = *nrNames-1;
    }
}

void swapNames(char *startPos[], int i, int j){
    char *temp;
    temp = *(startPos+i);
    *(startPos+i)=*(startPos+j);
    *(startPos+j)=temp;
}

void insertionSortNames(char *startPos[], int nrNames){
    for(int i=0;i<nrNames;i++){
        for(int j=i+1;j<nrNames;j++){
            if(strcmp(startPos[i],startPos[j])>0){
                swapNames(startPos,i,j);
            }
        }
    }
}

void recoverNames(char names[], char *startPos[], int *nrNames){
    int index=0;
    int i=0;
    while(names[index]!='\0'){
        for(i=0;i<*nrNames;i++){
            if(strcmp(&names[index],startPos[i])==0){
                printf("Name \"%s\" starts at %i and is not garbage\n",&names[index],index);
                break;
            }
        }
        if(strcmp(&names[index],startPos[i])!=0){
            printf("Name \"%s\" starts at %i and is garbage\n",&names[index],index);
            startPos[*nrNames]=&names[index];
            *nrNames = *nrNames+1;
        }
        index += strlen(&names[index])+1;
    }
}

int main(void){
    char cmd;
    char names[LENGTH]= { '\0' };
    char name[LENGTH]= { '\0' };
    char remName[LENGTH]={ '\0' };
    char * startPos[LENGTH];
    int nrNames = 0;
    int i=0;
    int j=0;
    startPos[nrNames]=&names[0];
    
    while(cmd!='q'){
        printf("Command? ");
        scanf(" %c",&cmd);
        switch(cmd){
            case 'v':
                recoverNames(names,startPos,&nrNames);
                break;
            case 'o':
                insertionSortNames(startPos,nrNames);
                break;
            case 's':
                printf("Indices? ");
                scanf("%i %i",&i,&j);
                swapNames(startPos,i,j);
                break;
            case 'r':
                printf("Name? ");
                scanf("%s",remName);
                removeName(startPos,&nrNames,remName);
                break;
            case 'l':
                printf("Name? ");
                scanf("%s",name);
                printf("\"%s\" has index %i\n",name,lookupNamePos(names,startPos,nrNames,name));
                break;
            case 'e':
                printf("Total length is %i\n",totalLength(startPos,nrNames));
                break;
            case 'n':
                printNames(names,startPos,nrNames);
                break;
            case 'i':
                printf("Name? ");
                scanf("%s",name);
                insertName(startPos,&nrNames,name);
                break;
            case 'p':
                printString(names);
                break;
            case 'q':
                printf("Bye!\n");
                break;
            default:
                printf("Unknown command '%c'\n",cmd);
                break;
        }
    }
}
